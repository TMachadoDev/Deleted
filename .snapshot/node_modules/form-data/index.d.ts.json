[{"id":"1719460913664","desc":"1","value":"// Definitions by: Carlos Ballesteros Velasco <https://github.com/soywiz>\n//                 Leon Yu <https://github.com/leonyu>\n//                 BendingBender <https://github.com/BendingBender>\n//                 Maple Miao <https://github.com/mapleeit>\n\n/// <reference types=\"node\" />\nimport * as stream from 'stream';\nimport * as http from 'http';\n\nexport = FormData;\n\n// Extracted because @types/node doesn't export interfaces.\ninterface ReadableOptions {\n  highWaterMark?: number;\n  encoding?: string;\n  objectMode?: boolean;\n  read?(this: stream.Readable, size: number): void;\n  destroy?(this: stream.Readable, error: Error | null, callback: (error: Error | null) => void): void;\n  autoDestroy?: boolean;\n}\n\ninterface Options extends ReadableOptions {\n  writable?: boolean;\n  readable?: boolean;\n  dataSize?: number;\n  maxDataSize?: number;\n  pauseStreams?: boolean;\n}\n\ndeclare class FormData extends stream.Readable {\n  constructor(options?: Options);\n  append(key: string, value: any, options?: FormData.AppendOptions | string): void;\n  getHeaders(userHeaders?: FormData.Headers): FormData.Headers;\n  submit(\n    params: string | FormData.SubmitOptions,\n    callback?: (error: Error | null, response: http.IncomingMessage) => void\n  ): http.ClientRequest;\n  getBuffer(): Buffer;\n  setBoundary(boundary: string): void;\n  getBoundary(): string;\n  getLength(callback: (err: Error | null, length: number) => void): void;\n  getLengthSync(): number;\n  hasKnownLength(): boolean;\n}\n\ndeclare namespace FormData {\n  interface Headers {\n    [key: string]: any;\n  }\n\n  interface AppendOptions {\n    header?: string | Headers;\n    knownLength?: number;\n    filename?: string;\n    filepath?: string;\n    contentType?: string;\n  }\n\n  interface SubmitOptions extends http.RequestOptions {\n    protocol?: 'https:' | 'http:';\n  }\n}\n","position":{"line":62,"character":0}}]